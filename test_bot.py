#!/usr/bin/env python3
"""
Script de testes para o GameFi RADAR BR Bot
Use este script para testar o bot antes de colocar em produ√ß√£o
"""

import sys
import asyncio
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent))

from config.config import validate_config, print_config
from src.ai_processor import ai
from src.telegram_bot import telegram
from src.scheduler import scheduler
from utils.logger import logger


def test_all():
    """Executa todos os testes"""
    
    print("\n" + "="*60)
    print("üß™ TESTANDO GameFi RADAR BR Bot")
    print("="*60 + "\n")
    
    # 1. Valida configura√ß√µes
    logger.section("1. VALIDANDO CONFIGURA√á√ïES")
    if not validate_config():
        logger.critical("‚ùå Configura√ß√µes inv√°lidas!")
        return False
    logger.success("Configura√ß√µes OK!")
    
    # 2. Testa Claude API
    logger.section("2. TESTANDO CLAUDE API")
    if not ai.test_connection():
        logger.critical("‚ùå Claude API n√£o est√° funcionando!")
        return False
    logger.success("Claude API OK!")
    
    # 3. Testa Telegram Bot
    logger.section("3. TESTANDO TELEGRAM BOT")
    if not asyncio.run(telegram.test_connection()):
        logger.critical("‚ùå Telegram Bot n√£o est√° funcionando!")
        return False
    logger.success("Telegram Bot OK!")
    
    # 4. Mostra agendamentos
    logger.section("4. VERIFICANDO AGENDAMENTOS")
    scheduler.setup_schedule()
    scheduler.get_status()
    
    logger.section("‚úÖ TODOS OS TESTES PASSARAM!")
    
    return True


def test_resumo_diario():
    """Testa gera√ß√£o e postagem de resumo di√°rio"""
    
    logger.section("üß™ TESTE: RESUMO DI√ÅRIO")
    
    logger.info("Gerando resumo di√°rio...")
    content = ai.generate_resumo_diario()
    
    if content:
        print("\n" + "="*60)
        print("CONTE√öDO GERADO:")
        print("="*60)
        print(content)
        print("="*60 + "\n")
        
        resposta = input("Deseja postar este conte√∫do? (s/N): ").lower()
        if resposta == 's':
            success = telegram.post_resumo_diario(content)
            if success:
                logger.success("‚úÖ Resumo di√°rio postado com sucesso!")
            else:
                logger.failed("‚ùå Falha ao postar")
        else:
            logger.info("Postagem cancelada pelo usu√°rio")
    else:
        logger.failed("‚ùå Falha ao gerar conte√∫do")


def test_noticia_relevante():
    """Testa gera√ß√£o e postagem de not√≠cia relevante"""
    
    logger.section("üß™ TESTE: NOT√çCIA RELEVANTE")
    
    logger.info("Gerando not√≠cia relevante...")
    content = ai.generate_noticia_relevante()
    
    if content:
        print("\n" + "="*60)
        print("CONTE√öDO GERADO:")
        print("="*60)
        print(content)
        print("="*60 + "\n")
        
        resposta = input("Deseja postar este conte√∫do? (s/N): ").lower()
        if resposta == 's':
            success = telegram.post_noticia_relevante(content)
            if success:
                logger.success("‚úÖ Not√≠cia relevante postada com sucesso!")
            else:
                logger.failed("‚ùå Falha ao postar")
        else:
            logger.info("Postagem cancelada pelo usu√°rio")
    else:
        logger.failed("‚ùå Falha ao gerar conte√∫do")


def menu():
    """Menu interativo de testes"""
    
    while True:
        print("\n" + "="*60)
        print("üß™ MENU DE TESTES - GameFi RADAR BR Bot")
        print("="*60)
        print("\n1. Executar todos os testes")
        print("2. Testar apenas Claude API")
        print("3. Testar apenas Telegram Bot")
        print("4. Testar gera√ß√£o de Resumo Di√°rio")
        print("5. Testar gera√ß√£o de Not√≠cia Relevante")
        print("6. Ver status e agendamentos")
        print("7. Ver estat√≠sticas do banco de dados")
        print("8. Executar resumo di√°rio AGORA")
        print("9. Executar not√≠cia relevante AGORA")
        print("0. Sair")
        
        opcao = input("\nEscolha uma op√ß√£o: ").strip()
        
        if opcao == "1":
            test_all()
            
        elif opcao == "2":
            logger.section("TESTANDO CLAUDE API")
            if ai.test_connection():
                logger.success("‚úÖ Claude API funcionando!")
            else:
                logger.failed("‚ùå Problema na Claude API")
                
        elif opcao == "3":
            logger.section("TESTANDO TELEGRAM BOT")
            if asyncio.run(telegram.test_connection()):
                logger.success("‚úÖ Telegram Bot funcionando!")
            else:
                logger.failed("‚ùå Problema no Telegram Bot")
                
        elif opcao == "4":
            test_resumo_diario()
            
        elif opcao == "5":
            test_noticia_relevante()
            
        elif opcao == "6":
            scheduler.setup_schedule()
            scheduler.get_status()
            
        elif opcao == "7":
            from utils.database import db
            stats = db.get_stats()
            logger.section("ESTAT√çSTICAS DO BANCO DE DADOS")
            print(f"\nüìä Total de posts: {stats['total_posts']}")
            print(f"üìù Resumos di√°rios: {stats['resumos']}")
            print(f"üì∞ Not√≠cias relevantes: {stats['noticias']}")
            if stats['first_post']:
                print(f"üóìÔ∏è  Primeiro post: {stats['first_post']}")
            if stats['last_post']:
                print(f"üóìÔ∏è  √öltimo post: {stats['last_post']}")
            print()
            
        elif opcao == "8":
            logger.info("Executando resumo di√°rio imediatamente...")
            scheduler.run_now('resumo')
            
        elif opcao == "9":
            logger.info("Executando not√≠cia relevante imediatamente...")
            scheduler.run_now('noticia')
            
        elif opcao == "0":
            logger.info("üëã Saindo...")
            break
            
        else:
            logger.warning("‚ö†Ô∏è  Op√ß√£o inv√°lida!")
        
        input("\nPressione ENTER para continuar...")


if __name__ == "__main__":
    try:
        menu()
    except KeyboardInterrupt:
        print("\n\nüëã Teste interrompido pelo usu√°rio\n")
    except Exception as e:
        logger.critical(f"‚ùå Erro: {str(e)}")
        sys.exit(1)